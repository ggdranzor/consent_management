{"ast":null,"code":"var _jsxFileName = \"/home/philips/fabric/phr-app/src/components/Login.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport SigninWidget from './SigninWidget';\nimport { withAuth } from '@okta/okta-react';\nexport default withAuth(class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.onSuccess = this.onSuccess.bind(this);\n    this.onError = this.onError.bind(this);\n    this.state = {\n      authenticated: null\n    };\n    this.checkAuthentication();\n  }\n\n  async checkAuthentication() {\n    const authenticated = await this.props.auth.isAuthenticated();\n\n    if (authenticated !== this.state.authenticated) {\n      this.setState({\n        authenticated\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    this.checkAuthentication();\n  }\n\n  onSuccess(res) {\n    console.log(this.props);\n\n    if (res.status === 'SUCCESS') {\n      return this.props.auth.redirect({\n        sessionToken: res.session.token\n      });\n    } else {// The user can be in another authentication state that requires further action.\n      // For more information about these states, see:\n      //   https://github.com/okta/okta-signin-widget#rendereloptions-success-error\n    }\n  }\n\n  onError(err) {\n    console.log('error logging in', err);\n  }\n\n  render() {\n    console.log(this.props);\n    if (this.state.authenticated === null) return null;\n    return this.state.authenticated ? React.createElement(Redirect, {\n      to: {\n        pathname: '/Homepage'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }) : React.createElement(SigninWidget, {\n      baseUrl: this.props.baseUrl,\n      onSuccess: this.onSuccess,\n      onError: this.onError,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    });\n  }\n\n});","map":{"version":3,"sources":["/home/philips/fabric/phr-app/src/components/Login.js"],"names":["React","Component","Redirect","SigninWidget","withAuth","Login","constructor","props","onSuccess","bind","onError","state","authenticated","checkAuthentication","auth","isAuthenticated","setState","componentDidUpdate","res","console","log","status","redirect","sessionToken","session","token","err","render","pathname","baseUrl"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,eAAeA,QAAQ,CAAC,MAAMC,KAAN,SAAoBJ,SAApB,CAA8B;AACpDK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaD,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKE,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE;AADJ,KAAb;AAGA,SAAKC,mBAAL;AACD;;AAED,QAAMA,mBAAN,GAA4B;AAC1B,UAAMD,aAAa,GAAG,MAAM,KAAKL,KAAL,CAAWO,IAAX,CAAgBC,eAAhB,EAA5B;;AACA,QAAIH,aAAa,KAAK,KAAKD,KAAL,CAAWC,aAAjC,EAAgD;AAC9C,WAAKI,QAAL,CAAc;AAAEJ,QAAAA;AAAF,OAAd;AACD;AACF;;AAEDK,EAAAA,kBAAkB,GAAG;AACnB,SAAKJ,mBAAL;AACD;;AAEDL,EAAAA,SAAS,CAACU,GAAD,EAAM;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAjB;;AACA,QAAIW,GAAG,CAACG,MAAJ,KAAe,SAAnB,EAA8B;AAC5B,aAAO,KAAKd,KAAL,CAAWO,IAAX,CAAgBQ,QAAhB,CAAyB;AAC9BC,QAAAA,YAAY,EAAEL,GAAG,CAACM,OAAJ,CAAYC;AADI,OAAzB,CAAP;AAGF,KAJA,MAIM,CACN;AACA;AACA;AACC;AACF;;AAEDf,EAAAA,OAAO,CAACgB,GAAD,EAAM;AACXP,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCM,GAAhC;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACLR,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAjB;AACF,QAAI,KAAKI,KAAL,CAAWC,aAAX,KAA6B,IAAjC,EAAuC,OAAO,IAAP;AACvC,WAAO,KAAKD,KAAL,CAAWC,aAAX,GACL,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEgB,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,GAEL,oBAAC,YAAD;AACE,MAAA,OAAO,EAAE,KAAKrB,KAAL,CAAWsB,OADtB;AAEE,MAAA,SAAS,EAAE,KAAKrB,SAFlB;AAGE,MAAA,OAAO,EAAE,KAAKE,OAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF;AAMD;;AAhDmD,CAA/B,CAAvB","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport SigninWidget from './SigninWidget';\nimport { withAuth } from '@okta/okta-react';\n\nexport default withAuth(class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.onSuccess = this.onSuccess.bind(this);\n    this.onError = this.onError.bind(this);\n    this.state = {\n      authenticated: null\n    };\n    this.checkAuthentication();\n  }\n\n  async checkAuthentication() {\n    const authenticated = await this.props.auth.isAuthenticated();\n    if (authenticated !== this.state.authenticated) {\n      this.setState({ authenticated });\n    }\n  }\n\n  componentDidUpdate() {\n    this.checkAuthentication();\n  }\n\n  onSuccess(res) {\n    console.log(this.props);\n    if (res.status === 'SUCCESS') {\n      return this.props.auth.redirect({\n        sessionToken: res.session.token\n      });\n   } else {\n    // The user can be in another authentication state that requires further action.\n    // For more information about these states, see:\n    //   https://github.com/okta/okta-signin-widget#rendereloptions-success-error\n    }\n  }\n\n  onError(err) {\n    console.log('error logging in', err);\n  }\n\n  render() {\n      console.log(this.props);\n    if (this.state.authenticated === null) return null;\n    return this.state.authenticated ?\n      <Redirect to={{ pathname: '/Homepage' }}/> :\n      <SigninWidget\n        baseUrl={this.props.baseUrl}\n        onSuccess={this.onSuccess}\n        onError={this.onError}/>;\n  }\n});"]},"metadata":{},"sourceType":"module"}